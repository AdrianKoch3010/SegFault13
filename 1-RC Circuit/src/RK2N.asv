function [x_values, y_values] = RK2N(ODE, step_size, final_val, xi, yi)
    % ODE solver
    % @param ODE The ODE to be solved in the form y' = f(x, y)
    % @param step_size aka h The distance on the x-axis between two
    % consecutive steps
    % @param final_val The x-value up to which the ODE is evaluated
    % @param xi The initial x-value
    % @param yi The initial y-value
    

    % Calculate the number of steps
    N = round((final_val - xi) / step_size);

    % Initialise output arrays
    x_values = zeros(1, N);
    y_values = zeros(1, N);
    x_values(1) = xi;
    y_values(1) = yi;

    %%%%%%%% EDIT VALUE OF A FOR DIFFERENT METHODS %%%%%%%
    
    % For heun
    a = 0.5;
    % For Midpoint
    % a = 0;
    % For Ralston
    % a = 1/3;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    b = 1-a;
    p = 1/(2*b);
    q = p;
    
    % Run for N - 1 iterations
    for i = 1 : N - 1
       K_one = ODE(x_values(i), y_values(i));
       x_values(i+1) = x_values(i) + step_size;
       
       K_two = ODE(x_values(i)+(p*step_size), y_values(i)+q*K_one*step_size);
       y_values(i+1) = y_values(i)+step_size*(a*K_one+b*K_two);
    end
    
    % Return the output arrays
    
    
end

